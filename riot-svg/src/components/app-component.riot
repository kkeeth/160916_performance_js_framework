<app-component>
  <div>
    <svg width={ window.innerWidth }
         height={ window.innerHeight }>
      <g each={ (particle, index) in state.particles }
         key={ index }>
        <rect
          x={ particle.displayX }
          y={ particle.displayY }
          width="2"
          height="2">
        </rect>
      </g>
    </svg>
    <div class="ui">
      <p>Emit Particle Per 1 Frame</p>
      <input type="range"
             name="emitOnFrame"
             value={ state.emitOnFrame }
             onchange={ handleChange }
             min="1"
             max="50" />
      <input type="number"
             name="emitOnFrame"
             value={ state.emitOnFrame }
             onchange={ handleChange }
             min="1"
             max="50" />
      <p>現在のパーティクル数 : { state.particles.length } 個</p>
    </div>
  </div>

  <script>
    import { register } from 'riot'
    import { ParticleData } from '../particle-data'
    // 本当はこのタグを活用したかった
    // import ParticleComponent from './particle-component.riot'
    let count = 0

    export default {
      // components: {
      //   ParticleComponent
      // },
      onBeforeMount() {
        // register('particle-component', ParticleComponent)
        this.state = {
          particles: [],
          emitOnFrame: 3
        }
      },
      onMounted(props, state) {
        this.tick()
        this.update()
      },
      handleChange(e) {
        const num = Number(e.currentTarget.value)
        this.state.emitOnFrame = num
        this.update()
      },
      /** エンターフレームイベントです。 */
      tick() {
        const particles = this.state.particles.concat()
        // 発生
        const len = Number(this.state.emitOnFrame)
        for (let i = 0; i < len; i++) {
          particles.push(new ParticleData(
            window.innerWidth / 2,
            window.innerHeight / 4,
            count++)
          );
        }

        // 更新
        particles.forEach((particle, index) => {
          particle.update()
          // 寿命の判定
          if (particle.life <= 0) {
            // 配列からも削除
            particles.splice(index, 1)
          }
        })

        // 更新
        this.state.particles = particles
        this.update()
        requestAnimationFrame(() => {
          this.tick()
        })
      },
    };
  </script>

  <style>
    body {
      margin: 0;
      padding: 0;
      overflow: hidden;
    }

    .ui {
      position: absolute;
      top: 10px;
      right: 10px;
    }
  </style>
</app-component>
